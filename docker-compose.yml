version: '3.3'

services:
  mysql_university:
    container_name: "mysql_university"
    image: mysql:8.0
    volumes:
      - my_db_data:/var/lib/mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: university_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    deploy:
      placement:
        constraints:
          - "node.role==manager"
    networks:
      - network-api-db
  adminer_container:
    image: adminer:4.7
    environment:
      ADMINER_DEFAULT_SERVER: mysql_university
    ports:
      - "8000:8080"
    networks:
      - network-api-db
  university_api:
    build:
      context: ./university
      dockerfile:  Dockerfile
    ports:
      - "8080:8080"
    networks:
      - network-api-db
      - internal
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql_university:3306/university_db
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_DATASOURCE_DRIVER-CLASS-NAME: com.mysql.cj.jdbc.Driver

    depends_on:
      - mysql_university
      - kafka1
      - zookeeper1
    restart: on-failure

  university_processor:
    build:
      context: ./university-processor
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    networks:
      - network-api-db
      - internal
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql_university:3306/university_db
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_DATASOURCE_DRIVER-CLASS-NAME: com.mysql.cj.jdbc.Driver

    depends_on:
      - mysql_university
      - kafka1
      - zookeeper1
    restart: on-failure

  zookeeper1:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - network-api-db


  kafka1:
    image: confluentinc/cp-kafka:latest
    hostname: kafka1
    container_name: kafka1
    depends_on:
      - zookeeper1
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - network-api-db
networks:
  network-api-db:
  internal:
volumes:
  my_db_data: {}




